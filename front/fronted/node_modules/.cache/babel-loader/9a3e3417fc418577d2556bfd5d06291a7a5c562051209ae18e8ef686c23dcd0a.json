{"ast":null,"code":"var _jsxFileName = \"E:\\\\proyeco final web 2\\\\front\\\\fronted\\\\src\\\\components\\\\Map.js\",\n  _s = $RefreshSig$();\n// src/components/Map.js\nimport React, { useCallback, useState } from 'react';\nimport { GoogleMap, LoadScript, Polyline, Marker, InfoWindow } from '@react-google-maps/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst containerStyle = {\n  width: '100%',\n  height: '500px'\n};\nconst center = {\n  lat: -16.2902,\n  lng: -63.5887\n}; // Centro aproximado de Bolivia\n\nconst Map = ({\n  roads,\n  municipalities,\n  onRoadClick,\n  highlightRoad,\n  incidents,\n  onCoordinatesSelected\n}) => {\n  _s();\n  const [selectedIncident, setSelectedIncident] = useState(null);\n  const handleMapClick = useCallback(e => {\n    if (!onCoordinatesSelected) return;\n    const lat = e.latLng.lat();\n    const lng = e.latLng.lng();\n    onCoordinatesSelected({\n      lat,\n      lng\n    });\n  }, [onCoordinatesSelected]);\n\n  // Cuando se hace clic en un marcador de incidente, actualizamos el estado\n  const handleIncidentClick = incident => {\n    setSelectedIncident(incident);\n  };\n\n  // Para cerrar el InfoWindow\n  const handleCloseInfoWindow = () => {\n    setSelectedIncident(null);\n  };\n  return /*#__PURE__*/_jsxDEV(LoadScript, {\n    googleMapsApiKey: process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n    children: /*#__PURE__*/_jsxDEV(GoogleMap, {\n      mapContainerStyle: containerStyle,\n      center: center,\n      zoom: 5,\n      onClick: handleMapClick,\n      children: [roads.map(road => /*#__PURE__*/_jsxDEV(Polyline, {\n        path: road.points,\n        options: {\n          strokeColor: road.blocked ? 'red' : 'blue'\n        },\n        onClick: () => onRoadClick && onRoadClick(road)\n      }, road.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this)), municipalities.map(m => /*#__PURE__*/_jsxDEV(Marker, {\n        position: m.coordinates\n      }, m.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this)), incidents.map(inc => /*#__PURE__*/_jsxDEV(Marker, {\n        position: inc.coordinates,\n        icon: \"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\",\n        onClick: () => handleIncidentClick(inc)\n      }, inc.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)), highlightRoad && /*#__PURE__*/_jsxDEV(Polyline, {\n        path: highlightRoad.points,\n        options: {\n          strokeColor: highlightRoad.blocked ? 'red' : 'green',\n          strokeWeight: 6\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this), selectedIncident && /*#__PURE__*/_jsxDEV(InfoWindow, {\n        position: selectedIncident.coordinates,\n        onCloseClick: handleCloseInfoWindow,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            maxWidth: '200px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h6\", {\n            children: selectedIncident.type\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Raz\\xF3n:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 18\n            }, this), \" \", selectedIncident.reason]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), selectedIncident.photo && /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: selectedIncident.photo.startsWith('http') ? selectedIncident.photo : process.env.REACT_APP_API_URL + selectedIncident.photo,\n              alt: \"Incidente\",\n              style: {\n                width: '100%',\n                height: 'auto'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"Coordenadas:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 18\n            }, this), \" \", selectedIncident.coordinates.lat, \", \", selectedIncident.coordinates.lng]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"MKpVJGYldl3ftx+mHfs7KPI+DVY=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useCallback","useState","GoogleMap","LoadScript","Polyline","Marker","InfoWindow","jsxDEV","_jsxDEV","containerStyle","width","height","center","lat","lng","Map","roads","municipalities","onRoadClick","highlightRoad","incidents","onCoordinatesSelected","_s","selectedIncident","setSelectedIncident","handleMapClick","e","latLng","handleIncidentClick","incident","handleCloseInfoWindow","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","children","mapContainerStyle","zoom","onClick","map","road","path","points","options","strokeColor","blocked","id","fileName","_jsxFileName","lineNumber","columnNumber","m","position","coordinates","inc","icon","strokeWeight","onCloseClick","style","maxWidth","type","reason","photo","src","startsWith","REACT_APP_API_URL","alt","_c","$RefreshReg$"],"sources":["E:/proyeco final web 2/front/fronted/src/components/Map.js"],"sourcesContent":["// src/components/Map.js\r\nimport React, { useCallback, useState } from 'react';\r\nimport { GoogleMap, LoadScript, Polyline, Marker, InfoWindow } from '@react-google-maps/api';\r\n\r\nconst containerStyle = {\r\n  width: '100%',\r\n  height: '500px'\r\n};\r\n\r\nconst center = { lat: -16.2902, lng: -63.5887 }; // Centro aproximado de Bolivia\r\n\r\nconst Map = ({ roads, municipalities, onRoadClick, highlightRoad, incidents, onCoordinatesSelected }) => {\r\n  const [selectedIncident, setSelectedIncident] = useState(null);\r\n\r\n  const handleMapClick = useCallback((e) => {\r\n    if (!onCoordinatesSelected) return;\r\n    const lat = e.latLng.lat();\r\n    const lng = e.latLng.lng();\r\n    onCoordinatesSelected({ lat, lng });\r\n  }, [onCoordinatesSelected]);\r\n\r\n  // Cuando se hace clic en un marcador de incidente, actualizamos el estado\r\n  const handleIncidentClick = (incident) => {\r\n    setSelectedIncident(incident);\r\n  };\r\n\r\n  // Para cerrar el InfoWindow\r\n  const handleCloseInfoWindow = () => {\r\n    setSelectedIncident(null);\r\n  };\r\n\r\n  return (\r\n    <LoadScript googleMapsApiKey={process.env.REACT_APP_GOOGLE_MAPS_API_KEY}>\r\n      <GoogleMap \r\n        mapContainerStyle={containerStyle} \r\n        center={center} \r\n        zoom={5}\r\n        onClick={handleMapClick}\r\n      >\r\n        {roads.map((road) => (\r\n          <Polyline\r\n            key={road.id}\r\n            path={road.points}\r\n            options={{ strokeColor: road.blocked ? 'red' : 'blue' }}\r\n            onClick={() => onRoadClick && onRoadClick(road)}\r\n          />\r\n        ))}\r\n\r\n        {municipalities.map((m) => (\r\n          <Marker key={m.id} position={m.coordinates} />\r\n        ))}\r\n\r\n        {incidents.map((inc) => (\r\n          <Marker\r\n            key={inc.id}\r\n            position={inc.coordinates}\r\n            icon=\"http://maps.google.com/mapfiles/ms/icons/yellow-dot.png\"\r\n            onClick={() => handleIncidentClick(inc)}\r\n          />\r\n        ))}\r\n\r\n        {highlightRoad && (\r\n          <Polyline\r\n            path={highlightRoad.points}\r\n            options={{ strokeColor: highlightRoad.blocked ? 'red' : 'green', strokeWeight: 6 }}\r\n          />\r\n        )}\r\n\r\n        {selectedIncident && (\r\n          <InfoWindow\r\n            position={selectedIncident.coordinates}\r\n            onCloseClick={handleCloseInfoWindow}\r\n          >\r\n            <div style={{ maxWidth: '200px' }}>\r\n              <h6>{selectedIncident.type}</h6>\r\n              <p><strong>Raz√≥n:</strong> {selectedIncident.reason}</p>\r\n              {selectedIncident.photo && (\r\n                <div>\r\n                  <img \r\n  src={selectedIncident.photo.startsWith('http') \r\n    ? selectedIncident.photo \r\n    : process.env.REACT_APP_API_URL + selectedIncident.photo\r\n  } \r\n  alt=\"Incidente\" \r\n  style={{ width: '100%', height: 'auto' }} \r\n/>\r\n\r\n                </div>\r\n              )}\r\n              <p><strong>Coordenadas:</strong> {selectedIncident.coordinates.lat}, {selectedIncident.coordinates.lng}</p>\r\n            </div>\r\n          </InfoWindow>\r\n        )}\r\n      </GoogleMap>\r\n    </LoadScript>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}